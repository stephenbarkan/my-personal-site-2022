{% extends "components/appletShell.njk" %}
{% import "components/button.njk" as "btn"%}
{% set postChatArrow %}{% include "icons/post-chat-arrow.svg" %}{% endset %}

{% block content %}
    <div
        x-data="{
            activeField: 0,
            appletState: 'idle',
            formFields: [
                {id: 1, title: 'Name', placeholder: 'Your name', value: '',  disabled: false,botMessage: `Hello, Stephen here! ðŸ‘‹ Who are you?`},
                {id: 2, title: 'Message', placeholder: 'Your message', value: '', disabled: false, botMessage: `Oh heyyy! Whatâ€™s up?`},
                {id: 3, title: 'Email', placeholder: 'Your email', value: '', disabled: false, botMessage: `Okay, thatâ€™s pretty cool. Will you give me your email so I can reply to you?`},
                {id: 4, title: 'blank', placeholder: '', value: '', disabled: true, botMessage: ''},
                {id: 5, title: 'blank2', placeholder: '', value: '', disabled: true, botMessage: `Thanks! Iâ€™ll try to get back to you soon.`}
            ],
            userName: 'Stephen',
            conversation: [],
            setAppletState () {
                this.appletState === `idle` ? this.appletState = `transitioning` : this.appletState = `idle`
            },
            addBubble (typingDots, content, sentByUser) {
                const newMessage = { id: this.conversation.length + 1, typingDots: typingDots, content: content, sentByUser: sentByUser }
                this.conversation.push(newMessage)
                setTimeout(() => { this.$refs.scroller.scrollTop = this.$refs.scroller.scrollHeight}, 10)

            },
            sendBotMessage () {
                this.setAppletState()
                this.activeField += 1
                document.activeElement.blur()
                this.addBubble(true, '', false)
                setTimeout(() => {
                    this.setAppletState()
                    this.conversation.pop() //removes typing bubble
                    this.addBubble(false, this.formFields[this.activeField - 1].botMessage ,false)
                    setTimeout(() => {
                        document.getElementById(`formField${this.activeField}`).focus()
                    }, 25)
                }, 2750);
            },
            incrementFormField () {
                if (this.activeField < this.formFields.length - 2) {
                    this.addBubble(false, this.formFields[this.activeField - 1].value, true )
                    this.sendBotMessage()
                } else {
                    this.addBubble(false, this.formFields[this.activeField - 1].value, true )
                    this.setAppletState()
                    this.activeField = this.activeField + 1
                }
            },
            submitForm () {
                this.formFields.forEach(field => {
                    field.disabled = false
                })
                const formData = new FormData(this.$refs.form);
                fetch(`/`, {
                method: 'POST',
                headers: {
                    Accept: 'application/x-www-form-urlencoded;charset=UTF-8',
                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    enctype: 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams(new FormData(this.$refs.form)).toString(),
                }).then((res) => {
                if (res) {
                    setTimeout(() => {
                        this.sendBotMessage()
                    }, 500);
                }
                });
                this.formFields.forEach(field => {
                    field.disabled = true
                })
            },

        }"
        x-init="sendBotMessage"
        class="flex flex-col flex-1 max-h-full px-3 pb-3">
        {# conversation section #}
        <div x-ref="scroller" class="flex flex-col flex-1 gap-3 pb-3 overflow-auto">
            <template x-for="message in conversation" :key="message.id">
                <div
                    :class="{
                        'pr-4': !message.sentByUser,
                        'justify-end pl-4': message.sentByUser,
                        'mt-auto': message.typingDots,
                    }"
                    class="flex">
                    <div
                        :class="{
                            'bg-clr-solid text-display-inverse-primary sentByUser': message.sentByUser,
                            'bg-clr-highlight text-display-secondary': !message.sentByUser,
                            'animate-clear-typing-bubble [animation-delay:750ms]': message.typingDots,
                            'animate-slide-up': !message.typingDots
                            }"
                        class="flex items-center px-3 py-2 min-h-[37px] rounded-xl max-w-full break-normal chat-bubble">
                        <div x-show="message.typingDots" class="flex gap-1.5">
                            {% for i in[1, 2, 3] %}
                                <div class="block w-1.5 h-1.5 bg-display-tertiary rounded-full animate-typing-dots" style="animation-delay: calc(-.33s * {{i}})"></div>
                            {% endfor %}
                        </div>
                        <span x-show="!message.typingDots" class="max-w-full break-words" x-text="message.content"></span>
                        {# <div class="tail"></div> #}
                    </div>
                </div>
            </template>
        </div>

        {# form section #}
        <form data-netlify="true" method="POST" hidden name="contact-form">
            <input type="text" name="testField">
            <textarea name="Name"></textarea>
            <textarea name="Message"></textarea>
            <textarea name="Email"></textarea>
            <textarea name="blank"></textarea>
            <textarea name="blank2"></textarea>
        </form>
        <form x-ref="form" id="contact-form" class="flex flex-col gap-3">
            <div class="divider"></div>
            <input type="hidden" name="form-name" value="contact-form"/>
            <template x-for="formField in formFields" :key="formField.id">
                <div
                    x-show="activeField === formField.id"
                    :class="{'disabled': appletState === 'transitioning' || formField.disabled}"
                    class="flex items-end transition-shadow rounded bg-clr-highlight focus-within:shadow-list-inset">
                    <label class="relative inline-grid items-center flex-1 align-top input-wrapper">
                        <span x-text="formField.placeholder" class="hidden"></span>
                        <textarea
                            @keydown.enter="formField.value && incrementFormField"
                            x-on:input="$event.target.parentNode.dataset.value = $event.target.value"
                            rows="1"
                            x-bind:name="formField.title"
                            x-model="formField.value"
                            x-bind:id="'formField'+ formField.id"
                            x-bind:tabindex="appletState === 'transitioning' ? -1 : 0"
                            x-bind:placeholder="formField.placeholder"
                            x-bind:disabled="formField.disabled"
                            resize=""
                            class="flex-1 py-2 pl-3 pr-1.5 h-full focus:translate-y-px transition-transform active:ease-bounce bg-transparent outline-none placeholder:text-display-tertiary" x-bind:placeholder="formField.placeholder"></textarea>
                    </label>
                    <button
                        type="button"
                        x-bind:tabindex="appletState === 'transitioning' ? -1 : 0"
                        :class="!formField.value && 'disabled'"
                        x-bind:disabled="!formField.value"
                        @click="incrementFormField"
                        class="pr-3 pl-1.5 py-2 group outline-none">
                        <div class="shadow-btn-highlight active:shadow-btn-highlight-inset transition flex items-center justify-center w-[22px] h-[22px] rounded-full group-hover:bg-btn-highlight-bg-hover bg-clr-solid">
                            <span class="block transition-transform duration-200 transform h-15 w-15 text-display-inverse-primary group-active:translate-y-px group-active:ease-bounce">{{ postChatArrow | safe }}</span></div>
                    </button>
                </div>
            </template>

        </form>

        {# confirm send dialog #}
        <div
            x-show="activeField === formFields.length - 1"
            x-transition:enter="transition duration-700 delay-1000"
            x-transition:enter-start="opacity-0"
            x-transition:enter-end="opacity-100"
            x-transition:leave="transition duration-700 delay-[600ms]"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0"
            class="absolute inset-0 flex items-center justify-center rounded-sm bg-ui-shade backdrop-blur">
            <div class="flex flex-col w-full max-h-full p-5">
                <div
                    x-show="activeField === formFields.length - 1"
                    x-transition:enter="transition duration-[600ms] delay-[1500ms]"
                    x-transition:enter-start="opacity-0 translate-y-3"
                    x-transition:enter-end="opacity-100 translate-y-0"
                    x-transition:leave="transition duration-[300ms]"
                    x-transition:leave-start="opacity-100 translate-y-0"
                    x-transition:leave-end="opacity-0 -translate-y-3"
                    class="flex flex-col gap-8 p-6 overflow-auto rounded bg-ui-applet-bg shadow-applet-header">
                    <div class="flex flex-col gap-6">
                        <header class="flex flex-col justify-center">
                            <h3 class="text-lg text-center">Ready to send?</h3>
                        </header>
                        <main class="flex flex-col items-stretch gap-3">
                            <template x-for="formField in formFields">
                                <template x-if="formField.value">
                                    <div class="flex flex-col gap-1 pb-3 border-b border-ui-divider last-of-type:border-0">
                                        <h4 x-text="formField.title" class="text-sm text-display-tertiary"></h4>
                                        <p x-text="formField.value" class="break-all text-display-secondary"></p>
                                    </div>
                                </template>
                            </template>
                        </main>
                    </div>
                    <footer class="sticky bottom-0">
                        {{btn.button(label="Send messages", highlighted=true, as="button", class="w-full", onClick="submitForm")}}
                    </footer>
                </div>
            </div>
        </div>
    </div>

{% endblock %}
