{% extends "components/appletShell.njk" %}
{% import "components/button.njk" as "btn"%}

{% set heartIcon %}{% include "icons/heart-fill.svg" %}{% endset %}
{% set playLargeIcon %}{% include "icons/play-large.svg" %}{% endset %}
{% set pauseLargeIcon %}{% include "icons/pause-large.svg" %}{% endset %}
{% set playOutlineIcon %}{% include "icons/play-outline.svg" %}{% endset %}
{% set playFillIcon %}{% include "icons/play-fill.svg" %}{% endset %}
{% set musicIcon %}{% include "icons/music.svg" %}{% endset %}
{% set musicLoadIcon %}{% include "icons/music-load.svg" %}{% endset %}
{% set soundcloudIcon %}{% include "icons/soundcloud.svg" %}{% endset %}

{% block content %}
    <div
    tabindex = "0"
x-data="{
    appletState: 'idle',
    wasPlaying: false,
    artwork: '',
    song: null,
    playbackPercentage: 0,
    durationSeconds: 0,
    currentSong: {
        index: 0,
        title: '',
        src: '',
    },

    styles: { transform: -100% + this.playbackPercentage + '%' },
    updatePlaybackVizTransform (playbackPercentage) {
        $refs.playbackVisualizer.style.transform = `translateX(calc(-100% + ${playbackPercentage}%))`
    },
    updateProgressBar () {
        const update = () => {
            currentTimeSec = this.song.seek()
            playbackPercentage = currentTimeSec / this.durationSeconds * 100
            this.updatePlaybackVizTransform(playbackPercentage)
            request = requestAnimationFrame(update)
            this.playbackPercentage = playbackPercentage
        }
        update()
    },
    load () {
        this.appletState = 'isLoading'
        Howler.unload()
        const sound = new Howl({
            src: [`../songs/${this.currentSong.src}.webm`, `../songs/${this.currentSong.src}.mp3`],
            html5: true
        });
        this.song = sound;
        sound.once('load',() => {
            this.play();
            this.durationSeconds = sound.duration()
            $refs.musicSlider.value = 0
        });
    },

    play () {
        this.song.play()
        this.appletState = 'playing'
        this.updateProgressBar()
        this.wasPlaying = true
        this.song.on('end', () => {
            if (this.currentSong.index < {{songs.length}}) {
                $refs.playlist.children[this.currentSong.index].querySelector('button').click()
            } else {
                this.appletState = 'playlistEnd'
                this.currentSong = {}
            }
        })
    },
    pause () {
        this.appletState = 'paused'
        this.song.pause()
        this.wasPlaying = false
    },
    handlePlayPauseButton () {
        if (this.appletState === 'playing' && this.song) {
            this.pause()
        } else if (this.appletState === 'paused' || this.appletState === 'notPlaying' && this.song) {
            this.play()
        }
    },
    handleSongListClick (index, title, artwork, src) {
        this.artwork = artwork
        this.currentSong = {index, title, src}
        this.load()
    },
    handleProgressChange(e) {
        const value = e.target.value
        this.song.seek(this.durationSeconds * value / 100)
    },
    handleProgressChangeStart() {
        this.wasPlaying && this.song.pause()
    },
    handleProgressChangeEnd() {
        this.wasPlaying && this.song.play()
    }
}"
@keydown.space="handlePlayPauseButton"
class="flex flex-col h-full gap-3 focus:outline-none">
        {# top section #}
        <div class="grid px-6 overflow-hidden sm:px-3 grid-absolute">
            <div x-show="appletState === 'idle'" class="grid grid-inset-0 place-content-center">
                <h3 class="text-lg text-center sm:text-left">Choose a song to listen to some of the music I've written!</h3>
            </div>
            <div x-show="appletState === 'playlistEnd'" x-cloak class="grid grid-inset-0 place-content-center">
                <h3 class="text-lg text-center sm:text-left">Thanks for listening! <span :data-applet="activeApplet" class="relative inline-block left-1 top-[3px] h-15 w-15 text-clr-solid">{{heartIcon | safe}}</span></h3>
            </div>
            <div
            x-cloak
            :class="appletState === 'idle' || appletState === 'playlistEnd' ? 'pointer-events-none invisible opacity-0' : 'opacity-100'"
            class="flex flex-col items-center gap-4 transition-opacity duration-500 delay-200 sm:flex-row grid-inset-0">
                <figure class="w-[150px] h-[150px] sm:w-[106px] sm:h-[106px] relative overflow-hidden rounded">
                    <img
                :class="{'blur-sm duration-0': appletState === 'isLoading' || appletState === 'notPlaying', ' transition-all duration-500 delay-200': appletState === 'playing'}"
                class="w-full h-full" :src="artwork && '../songs/' + artwork" alt="">
                    <div class="absolute inset-0 rounded shadow-inset-stroke"></div>
                </figure>
                <div class="flex flex-col gap-4 grow">
                    <h3 class="text-lg text-center sm:text-left" x-text="currentSong.title"></h3>
                    <div class="flex flex-col items-center gap-3 sm:flex-row">
                        <button
                        @click="handlePlayPauseButton"
                        :disabled="appletState === 'isLoading'"
                        :class="{'pointer-events-none': appletState === 'isLoading'}"
                        class="flex items-center justify-center shadow-btn-highlight hover:bg-btn-highlight-bg-hover transition active:shadow-btn-highlight-inset group rounded-full bg-clr-solid w-12 sm:w-[39px] h-12 sm:h-[39px]">
                            <span class="grid items-center transition duration-200 transform grid-absolute text-display-inverse-primary group-active:translate-y-px group-active:ease-bounce justify-items-center">
                                {{ playButtonIcon | safe }}
                            </span>
                        </button>
                        <div class="relative flex-1 flex-shrink-0 w-full sm:w-auto">
                            <input
                            type="range"
                            id="music-slider"
                            name="track-progress"
                            x-ref="musicSlider"
                            x-model="playbackPercentage"
                            x-on:input="handleProgressChange"
                            x-on:mousedown="handleProgressChangeStart"
                            x-on:mouseup="handleProgressChangeEnd"
                            x-on:touchstart="handleProgressChangeStart"
                            x-on:touchend="handleProgressChangeEnd"
                            class="relative z-10 block w-full h-[5px] bg-transparent"
                            :class="{'pointer-events-none': appletState === 'isLoading'}"
                            min="0" max="100" value="0" step=".25">
                            <label for="track-progress" class="sr-only">Scrub through song</label>
                            <div class="absolute left-0 right-0 z-0 h-1 -mt-1 overflow-hidden rounded-full bg-clr-highlight shadow-list-inset">
                                <div x-ref="playbackVisualizer" style="transform: translateX(-100%)" class="w-full h-full rounded-full bg-clr-solid"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="mx-3 divider"></div>
        {# bottom section #}
        <ul class="flex flex-col flex-1 gap-1 px-3 pb-3 overflow-y-auto" x-ref="playlist">
            {% for song in songs %}
                <li>{{songListItem(title=song.title, index=loop.index, id=song.title, artwork=song.artwork, src=song.src, class="w-full")}}</li>
            {% endfor %}
            <li>
                <a href="https://soundcloud.com/stephenbarkan" target="_blank"
            class="text-left group flex rounded pb-2 pt-1.5 px-2 h-14 sm:h-auto hover:bg-clr-highlight transition-shadow active:shadow-list-inset">
                    <div class="flex items-center gap-3 transition duration-75 transform group-active:translate-y-px">
                        <div class="w-5 h-5 sm:w-15 sm:h-15 text-display-tertiary">
                            <span>{{soundcloudIcon | safe }}</span>
                        </div>
                        <div class="self-stretch sm:hidden divider vertical"></div>
                        <div class="flex-1 flex gap-1.5 items-baseline overflow-hidden">
                            <p class="sm:truncate group-active:text-display-primary text-display-secondary">
                        Listen to more on Soundcloud!
                    </p>
                        </div>
                    </div>
                </a>
            </li>
        </ul>
    </div>
{% endblock %}

{% macro songListItem(title, class, onClick, index, id, artwork, src) %}
    <button
        @click="handleSongListClick({{index}}, `{{title}}`, `{{artwork}}`, `{{src}}`)"
        :disabled="currentSong.index === {{index}}"
        :class="{ 'appletListItemActive': currentSong.index === {{index}} }"
        class="{{class}} text-left group block pb-2 pt-1.5 h-14 sm:h-auto px-2 appletListItem">
        <div
            :class="currentSong.index === {{index}} && 'translate-y-px'"
            class="flex items-center gap-3 appletListItemContents">
            <div
                :class="currentSong.index === {{index}} ? 'text-clr-solid' : 'text-display-tertiary'"
                class="w-5 h-5 sm:w-15 sm:h-15">
                <span x-show="currentSong.index === {{index}}" class="text-clr-solid">{{playFillIcon | safe }}</span>
                <span x-show="currentSong.index !== {{index}}">
                    <span class="hidden group-hover:block">{{playOutlineIcon | safe }}</span>
                    <span class="group-hover:hidden">{{musicIcon | safe }}</span>
                </span>
            </div>
            <div class="self-stretch sm:hidden divider vertical"></div>
            <div class="flex-1 flex gap-1.5 items-baseline overflow-hidden">
                <p
                    :class="{'text-display-primary': currentSong.index === {{index}}, 'group-active:text-display-primary text-display-secondary': currentSong.index !== {{index}}}"
                    class="sm:truncate">
                    {{title}}
                </p>
            </div>
        </div>
    </button>
{% endmacro %}

{% set playButtonIcon %}
<span
    class="grid-inset-0 sm:w-15 w-[17px] sm:h-15 h-[17px] animate-spin"
    x-show="appletState === 'isLoading'"
    x-transition:enter="transition delay-150ms"
    x-transition:enter-start="opacity-0"
    x-transition:enter-end="opacity-100"
    >
    {{musicLoadIcon | safe}}
</span>
<span
    class="grid-inset-0 w-sm:15 w-[17px] h-sm:15 h-[17px]"
    x-show="appletState === 'paused'">
    {{playLargeIcon | safe}}
</span>
<span
    class="grid-inset-0 w-sm:15 w-[17px] h-sm:15 h-[17px]"
    x-show="appletState === 'playing'">
    {{pauseLargeIcon | safe}}
</span>
{% endset %}
